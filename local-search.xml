<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hexo 版本升级</title>
    <link href="/2023/12/25/hexo-update/"/>
    <url>/2023/12/25/hexo-update/</url>
    
    <content type="html"><![CDATA[<h3 id=""><a href="#" class="headerlink" title=""></a></h3><ul><li>以下指令均在Hexo目录下操作，先定位到Hexo目录  </li><li>查看当前版本，判断是否需要升级  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">hexo version<br></code></pre></td></tr></table></figure></li></ul><h3 id="全局升级hexo-cli"><a href="#全局升级hexo-cli" class="headerlink" title="全局升级hexo-cli"></a>全局升级hexo-cli</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm i hexo-cli -g <br></code></pre></td></tr></table></figure><h3 id="再次查看版本，看hexo-cli是否升级成功"><a href="#再次查看版本，看hexo-cli是否升级成功" class="headerlink" title="再次查看版本，看hexo-cli是否升级成功"></a>再次查看版本，看hexo-cli是否升级成功</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">hexo version<br></code></pre></td></tr></table></figure><h3 id="安装npm-check，若已安装可以跳过"><a href="#安装npm-check，若已安装可以跳过" class="headerlink" title="安装npm-check，若已安装可以跳过"></a>安装npm-check，若已安装可以跳过</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm install -g npm-check <br></code></pre></td></tr></table></figure><h3 id="检查系统插件是否需要升级"><a href="#检查系统插件是否需要升级" class="headerlink" title="检查系统插件是否需要升级"></a>检查系统插件是否需要升级</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm-check  <br></code></pre></td></tr></table></figure><h3 id="安装npm-upgrade，若已安装可以跳过"><a href="#安装npm-upgrade，若已安装可以跳过" class="headerlink" title="安装npm-upgrade，若已安装可以跳过"></a>安装npm-upgrade，若已安装可以跳过</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm install -g npm-upgrade  <br></code></pre></td></tr></table></figure><h3 id="更新package-json"><a href="#更新package-json" class="headerlink" title="更新package.json"></a>更新package.json</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm-upgrade  <br></code></pre></td></tr></table></figure><h3 id="更新全局插件"><a href="#更新全局插件" class="headerlink" title="更新全局插件"></a>更新全局插件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm update -g  <br></code></pre></td></tr></table></figure><h3 id="更新系统插件"><a href="#更新系统插件" class="headerlink" title="更新系统插件"></a>更新系统插件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm update --save  <br></code></pre></td></tr></table></figure><h3 id="再次查看版本，判断是否升级成功"><a href="#再次查看版本，判断是否升级成功" class="headerlink" title="再次查看版本，判断是否升级成功"></a>再次查看版本，判断是否升级成功</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">hexo version<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>风下之乡</title>
    <link href="/2023/12/25/wind/"/>
    <url>/2023/12/25/wind/</url>
    
    <content type="html"><![CDATA[<p>我喜欢婆罗洲那些黑黢黢的夜晚。空气中弥漫着树芽和湿漉漉的树叶的气味，仅有的声音是来自于青蛙的呱噪和夜鹰的咕咕，唯一的陪伴来自我们自己，仅有的只言片语也我们自己的。 我喜欢那些独自在家的安静日子，那些懒散、无所事事、不值一提的日子。只有时间和孤独，才能让人认识到自己的存在。这些，是我们在婆罗洲所拥有的。</p><p>我也喜欢那些丛林中的旅行，认识了那些我一直想要认识的事物— 阴云惨淡，如地狱般的尼泊湿地；模糊暧昧的绿色河流，美丽刺激的险滩；阳光照射下，色泽醇厚的裸露的脊背。</p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Non Fiction</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从零开始打造更强的私有GPT大模型- RAG教程01</title>
    <link href="/2023/12/25/rag-101/"/>
    <url>/2023/12/25/rag-101/</url>
    
    <content type="html"><![CDATA[<p><img src="https://s.alidraft.com/vent/vent1924_convey_a_sense_of_cutting-edge_technology_and_innovati_58510eb0-17a4-4f8a-baa3-4c159386c609.png" alt="vent1924_convey_a_sense_of_cutting-edge_technology_and_innovati_58510eb0-17a4-4f8a-baa3-4c159386c609.png"></p><h2 id="RAG理论"><a href="#RAG理论" class="headerlink" title="RAG理论"></a>RAG理论</h2><h3 id="1-什么是RAG"><a href="#1-什么是RAG" class="headerlink" title="1. 什么是RAG"></a>1. 什么是RAG</h3><p>众所周知，大模型基于海量的数据来训练，它具备非常强大的智能，能够回答各种问题。但是我们在使用过程中发现，通用大模型在某些专业领域能力还不够强，很多<strong>领域相关问题很难回答得上来</strong>。通常，预训练（pre-train）的大模型只懂得它训练时用的数据，对于训练集之外的新信息（比如网络搜索新数据或特定行业的知识）就不太清楚。</p><p>那么怎么构建一个私有的GPT大模型呢？方法有很多种，包括 1. 重新训练<strong>私有领域数据</strong>的大模型，2. 基于已有大模型做专有数据的<strong>微调</strong>(FineTuning) 3. 通过RAG技术，优化大模型基础能力。4. 通过Prompt 工程把私有数据在对话中给到大模型。</p><p><strong>RAG</strong>: Retrieval Augmented Generation，检索增强生成技术。RAG由FaceBook AI实验室 于2020年提出，他们的论文<a href="https://arxiv.org/abs/2005.11401">Retrieval-Augmented Generation for Knowledge-Intensive NLP Tasks</a>， 提供了一种通过给大模型提供向量数据来增强模型能力的方法。</p><p>快速来看一下文章摘要：</p><blockquote><ol><li><strong>背景与挑战</strong>：这些大型预训练语言模型，因其存储了大量事实知识和在 NLP 任务中的出色表现而闻名。但它们在精确获取和处理知识方面存在局限，尤其是在知识要求高的任务中。这导致它们在特定任务的架构上表现不佳。此外，如何提供决策依据和更新模型中的知识仍是一个挑战。</li></ol></blockquote><blockquote><ol start="2"><li><strong>检索增强生成（RAG）方法</strong>：文章提出了一种 RAG 模型的微调方案，这些模型巧妙地结合了预训练的参数记忆（例如 seq2seq 模型）和非参数记忆（例如维基百科的密集向量索引）。通过预训练的神经检索器，这种组合被赋予了新的生命。RAG 模型的目标是利用这两种记忆类型，使语言生成更加生动和具有创造力。</li></ol></blockquote><blockquote><ol start="3"><li><strong>两种RAG形式</strong>：研究精心比较了两种 RAG 形式。一种在整个生成过程中使用相同的检索段落，另一种则可以为每个词汇使用不同的段落。。</li></ol></blockquote><blockquote><ol start="4"><li><strong>性能与评估</strong>：在多种知识密集型 NLP 任务中，RAG 模型经过微调和评估后，创造了三个开放领域问答任务的新纪录，超越了传统的参数型 seq2seq 模型和专门的检索-提取架构。在语言生成方面，与仅使用参数的 seq2seq 模型相比，RAG 模型能生成更加具体、多样和真实的语言。</li></ol></blockquote><p>整体看一下：论文对RAG技术的理解。 主要由 <strong>Retriever</strong>和<strong>Generator</strong>两大部分组成。<br><img src="https://s.zhangguiyi.cn/vent/202312181613600.png" alt="image.png"></p><p>随着时间的推移，尤其是大模型的进步，RAG的架构有些变化，更加组件化和清晰化。<br>如果希望了解更多关于RAG的历史和发展，推荐仔细阅读综述文章： <strong><a href="https://arxiv.org/pdf/2312.10997.pdf">Retrieval-Augmented Generation for Large Language Models: A Survey”</a></strong> </p><p><img src="https://s.alidraft.com/vent/202312211120837.png" alt="image.png"></p><h3 id="2-进一步理解RAG"><a href="#2-进一步理解RAG" class="headerlink" title="2. 进一步理解RAG"></a>2. 进一步理解RAG</h3><p>第一节相对学术化一些，我们来看一个更好理解的图：</p><p><img src="https://docs.llamaindex.ai/en/stable/_images/basic_rag.png"></p><p>从上图可以看到<strong>RAG</strong>的系统核心,由User(Query),(Vector) Index , LLM 三大组件组成。</p><h4 id="2-1-三大组件"><a href="#2-1-三大组件" class="headerlink" title="2.1 三大组件"></a>2.1 三大组件</h4><ol><li>**用户发起的查询(User-&gt;query)**。这种查询一般都是自然语言的，用户不再需要学习类似于之前搜索引擎的DSL或者数据库的SQL。这样大幅降低这类系统的使用门槛。</li><li><strong>模型所需的外部数据(Index -&gt; prompt)<strong>。可以看到，RAG系统的核心工作其实在这个组件。<br> 1. <strong>索引</strong>：将不同类似的用户数据，比如结构化的关系数据库、非结构化的文本、甚至是可编程的API，通过向量嵌入(Vector embedding)方法来将它们变成向量数据。更多关于向量数据库的文章，可以访问我之前的博客。涉及到</strong>向量化(Vector embedding)方法</strong>和<strong>切片(Chunk)方法</strong>。<br> 2. <strong>召回</strong>，向量数据的召回，本质上通过余弦相似度来找到最匹配的多个向量。目的是从大量数据中快速筛选出与查询最相关的文档子集，为后续的更详细检索过程提供一个更专注的候选集。这种方法旨在提高检索过程的效率和效果，减少计算资源的需求，并加速响应时间。<br> 3. <strong>查询</strong>。这里查询方法有很多种，涉及到向量数据库的相关度计算与评估，不同的查询策略。</li><li>**大模型(LLM)**。这里面的大模型可以是开源的Llama2&#x2F;Mistral 等，也可以是闭源的GPT3.5&#x2F;4等。</li></ol><h4 id="2-2-实现RAG的五个步骤"><a href="#2-2-实现RAG的五个步骤" class="headerlink" title="2.2 实现RAG的五个步骤"></a>2.2 实现RAG的五个步骤</h4><p>重复总结一下，实现RAG中有五个关键步骤，如下图所示：<br><img src="https://docs.llamaindex.ai/en/stable/_images/stages.png"></p><ul><li><strong>加载</strong>：指将各种文本文件、PDF、其他网站、数据库还是API等数据，导入我们工作流的步骤。</li><li><strong>索引</strong>：和普通关系数据库无本质差异，在于通过索引加速查询。不同的是，具体的索引算法。</li><li><strong>存储</strong>：存储索引以及其他元数据，以避免重新索引</li><li><strong>查询</strong>：对于任何给定的索引，可以进行多种查询，包括子查询、多步查询和混合策略。</li><li><strong>评估</strong>：提供了关于查询的响应有多准确、快速的客观衡量。</li></ul><h3 id="3-RAG的进化"><a href="#3-RAG的进化" class="headerlink" title="3. RAG的进化"></a>3. RAG的进化</h3><p><img src="https://s.alidraft.com/vent/202312211123188.png" alt="image.png"></p><ol><li><p><strong>初级RAG（Naive RAG）</strong>：这是RAG的最初形式，包括基本的索引、检索和生成过程。它以简单的方式将检索到的信息与生成任务相结合，但可能存在准确性和效率的问题。</p></li><li><p><strong>高级RAG（Advanced RAG）</strong>：在初级RAG的基础上，高级RAG引入了预检索和后检索处理方法，优化了索引和检索流程。这种范式致力于提高检索内容的质量和相关性，以及提升生成任务的效果。</p></li><li><p><strong>模块化RAG（Modular RAG）</strong>：这种范式通过引入多样的模块，如搜索模块、记忆模块和额外的生成模块，提供了更多的灵活性和定制化能力。模块化RAG允许根据特定问题的上下文重新配置或替换模块，实现更复杂和高效的检索增强生成任务。</p></li></ol><p>再次推荐阅读综述文章： <strong><a href="https://arxiv.org/pdf/2312.10997.pdf">Retrieval-Augmented Generation for Large Language Models: A Survey”</a></strong> </p><h3 id="4-RAG能干嘛？"><a href="#4-RAG能干嘛？" class="headerlink" title="4. RAG能干嘛？"></a>4. RAG能干嘛？</h3><p>RAG的LLM应用的用例无穷无尽，但大致可以分为三类：</p><p><a href="https://docs.llamaindex.ai/en/stable/module_guides/deploying/query_engine/root.html"><strong>查询引擎</strong></a>: 查询引擎允许您对您的数据提出问题。它接收自然语言查询，并返回响应，以及检索并传递给LLM的参考上下文。</p><p><a href="https://docs.llamaindex.ai/en/stable/module_guides/deploying/chat_engines/root.html"><strong>聊天引擎</strong></a>： 聊天引擎用于与您的数据进行<strong>多轮对话</strong>。</p><p><a href="https://docs.llamaindex.ai/en/stable/module_guides/deploying/agents/root.html"><strong>Agent(代理)</strong></a>: Agent由LLM驱动，能够实现自动决策。可以采取任意数量的步骤来完成给定的任务，动态地决定最佳行动方案。Agent某种意义上来讲是一种AGI。</p><h3 id="5-给我也搞一个"><a href="#5-给我也搞一个" class="headerlink" title="5. 给我也搞一个"></a>5. 给我也搞一个</h3><p><strong>可以！</strong><br>接下来我们基于<a href="https://www.llamaindex.ai/">Llama Index</a>库来实现一个网页数据的Q&amp;A机器人。</p><h2 id="RAG实战"><a href="#RAG实战" class="headerlink" title="RAG实战"></a>RAG实战</h2><p>2023 年以来，出现了大量的开源 &amp; 闭源LLM大模型，基本上都能够在上面构建 RAG 系统。<br>最常见的方式包括： </p><ul><li>GPT-3.5&#x2F;4 + RAG（闭源方案） </li><li>Llama 2 &#x2F; Mistral + RAG（开源方案）</li></ul><h3 id="基于LLama-Index-和-GPT3-5-来构建"><a href="#基于LLama-Index-和-GPT3-5-来构建" class="headerlink" title="基于LLama-Index 和 GPT3.5 来构建"></a>基于LLama-Index 和 GPT3.5 来构建</h3><p>我们基于来LLama-Index 和 GPT3.5 来构建一个RAG系统，它能够访问你指定的<strong>网页数据</strong>，你可以提问关于这个网页的<strong>任何内容</strong>。</p><blockquote><ol><li>Llama-Index是一个简单灵活的数据框架，用于连接自定义数据源到大型语言模型（LLM）。</li><li>它提供了API和入门教程，方便用户进行数据的摄取和查询。</li><li>Llama-Index可以作为桥梁，连接自定义数据和大型语言模型。</li><li>通过Llama-Index，用户可以轻松构建应用程序，并访问私有或特定领域的数据。</li></ol></blockquote><ul><li>复习一遍流程：加载、索引、存储、查询、评估</li></ul><h3 id="加载库和数据"><a href="#加载库和数据" class="headerlink" title="加载库和数据"></a>加载库和数据</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 安装所需的库</span><br>!pip install llama-index transformers<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> llama_index.readers <span class="hljs-keyword">import</span> BeautifulSoupWebReader<br><br>  <br><span class="hljs-comment"># 访问智写AI的官网博客</span><br>url = <span class="hljs-string">&quot;https://www.draftai.cn/2023/12/19/chatonce-support-chat-with-file/&quot;</span><br><span class="hljs-comment"># 通过BeautifulSoupWebReader 来加载数据</span><br>documents = BeautifulSoupWebReader().load_data([url])<br><br></code></pre></td></tr></table></figure><h3 id="索引-存储"><a href="#索引-存储" class="headerlink" title="索引&amp;存储"></a>索引&amp;存储</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment">## index </span><br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">import</span> openai<br><br><span class="hljs-comment">#设置你在openai的密钥</span><br>os.environ[<span class="hljs-string">&#x27;OPENAI_API_KEY&#x27;</span>] = <span class="hljs-string">&quot;sk-&quot;</span><br><br>openai.api_key = os.environ[<span class="hljs-string">&#x27;OPENAI_API_KEY&#x27;</span>]<br><span class="hljs-keyword">from</span> llama_index.llms <span class="hljs-keyword">import</span> OpenAI<br><br>  <br><span class="hljs-comment">## 指定GPT3.5模型，记得要用gpt-3.5-turbo-1106，更便宜</span><br>llm = OpenAI(model=<span class="hljs-string">&quot;gpt-3.5-turbo-1106&quot;</span>, temperature=<span class="hljs-number">0</span>)<br><span class="hljs-keyword">from</span> llama_index <span class="hljs-keyword">import</span> ServiceContext<br><br>  <br><span class="hljs-comment">## 向量化，采用BAAI的向量库，开源免费，比用OpenAI的embbeding便宜。</span><br>service_context = ServiceContext.from_defaults(llm=llm, embed_model=<span class="hljs-string">&quot;local:BAAI/bge-small-zh-v1.5&quot;</span>) <span class="hljs-comment">#BAAI/bge-small-zh-v1.5. BAAI/bge-small-en-v1.5</span><br><br></code></pre></td></tr></table></figure><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> llama_index.response.notebook_utils <span class="hljs-keyword">import</span> display_response<br><span class="hljs-keyword">import</span> logging<br><br><span class="hljs-keyword">import</span> sys<br><br>  <br><span class="hljs-comment"># 打印日志组件</span><br>logging.basicConfig(stream=sys.stdout, level=logging.INFO)<br><br>logging.getLogger().addHandler(logging.StreamHandler(stream=sys.stdout))<br>query_engine = vector_index.as_query_engine(response_mode=<span class="hljs-string">&quot;compact&quot;</span>)<br><br>  <br><span class="hljs-comment"># 简单查询问题</span><br>response = query_engine.query(<span class="hljs-string">&quot;智写AI能干嘛?它最新的功能是什么？&quot;</span>)<br><br>  <br><span class="hljs-comment"># 展示返回结果</span><br>display_response(response)<br></code></pre></td></tr></table></figure><h3 id="不同的查询策略和效果"><a href="#不同的查询策略和效果" class="headerlink" title="不同的查询策略和效果"></a>不同的查询策略和效果</h3><p><img src="https://s.alidraft.com/vent/202312211901720.png" alt="image.png"></p><p><img src="https://s.alidraft.com/vent/202312211900917.png" alt="image.png"></p><p><img src="https://s.alidraft.com/vent/202312211903829.png" alt="image.png"></p><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><p>可以复制我在Colab的<a href="https://colab.research.google.com/drive/1gvqOOpxduIKS3EPCwG3mkn8hnEmWED1L?usp=sharing">notebook </a>直接运行。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1]Retrieval-Augmented Generation for Knowledge-Intensive NLP Tasks: <em><a href="https://arxiv.org/abs/2005.11401">https://arxiv.org/abs/2005.11401</a></em></p><p>[2]<strong>查询引擎</strong>: <em><a href="https://docs.llamaindex.ai/en/stable/module_guides/deploying/query_engine/root.html">https://docs.llamaindex.ai/en/stable/module_guides/deploying/query_engine/root.html</a></em></p><p>[3]<strong>聊天引擎</strong>: <em><a href="https://docs.llamaindex.ai/en/stable/module_guides/deploying/chat_engines/root.html">https://docs.llamaindex.ai/en/stable/module_guides/deploying/chat_engines/root.html</a></em></p><p>[4]<strong>Agent(代理)</strong>: <em><a href="https://docs.llamaindex.ai/en/stable/module_guides/deploying/agents/root.html">https://docs.llamaindex.ai/en/stable/module_guides/deploying/agents/root.html</a></em></p><p>[5]Llama Index: <em><a href="https://www.llamaindex.ai/">https://www.llamaindex.ai/</a></em></p><p>[6]notebook : <em><a href="https://colab.research.google.com/drive/1gvqOOpxduIKS3EPCwG3mkn8hnEmWED1L?usp=sharing">https://colab.research.google.com/drive/1gvqOOpxduIKS3EPCwG3mkn8hnEmWED1L?usp=sharing</a></em></p>]]></content>
    
    
    <categories>
      
      <category>AI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RAG</tag>
      
      <tag>vector embeedings</tag>
      
      <tag>Llama Index</tag>
      
      <tag>向量数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
